Inport Foundation

/*
https://www.hackerrank.com/challenges/weighted-uniform-string/problem

A weighted string is a string of lowercase English letters where each letter has a weight. Character weights are 1 to 26 from a to z correspondingly.
A uniform string consists of a single character repeated zero or more times. For example, ccc and a are uniform strings, but bcb and cd are not.
Given a string, s, let U be the set of weights for all possible uniform contiguous substrings of string . There will be n queries to answer where each 
query consists of a single integer. Create a return array where for each query, the value is Yes if query[i]  belongs to U. Otherwise, append No.

Example
s = "abbcccdddd"
queries = [1, 7, 5, 4, 15]


Working from left to right, weights that exist are:

string  weight
a       1
b       2
bb      4
c       3
cc      6
ccc     9
d       4
dd      8
ddd     12
dddd    16

Now for each value in queries, see if it exists in the possible string weights. The return array is ['Yes', 'No', 'No', 'Yes', 'No'].
Function Description

Complete the weightedUniformStrings function in the editor below.

weightedUniformStrings has the following parameter(s):
- string s: a string
- int queries[n]: an array of integers

Returns
- string[n]: an array of strings that answer the queries

*/


func weightedUniformStrings(s: String, queries: [Int]) -> [String]  {
    var weights = Set<Int>()
    var answer = [String]()
    var t = 0
    let alphabetArr = " abcdefghijklmnopqrstuvwxyz".compactMap({$0})
    let sArr = s.compactMap({$0})
    for i in 0..<sArr.count {
        if i == 0 {
           t = alphabetArr.firstIndex(of: sArr[0])!
            weights.insert(t)
        } else {
            if sArr[i] == sArr[i - 1] {
                t += alphabetArr.firstIndex(of: sArr[i])!
                weights.insert(t)
            } else {
                t = alphabetArr.firstIndex(of: sArr[i])!
                weights.insert(t)
            }
        }
    }
    for j in queries {
        if weights.contains(j) {
            answer.append("Yes")
        } else {
            answer.append("No")
        }
    }
    return answer
}

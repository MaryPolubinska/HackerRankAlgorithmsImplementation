import Foundation

/*
https://www.hackerrank.com/challenges/between-two-sets/problem?h_r=profile

There will be two arrays of integers. Determine all integers that satisfy the following two conditions:

1. The elements of the first array are all factors of the integer being considered
2. The integer being considered is a factor of all elements of the second array
These numbers are referred to as being between the two arrays. Determine how many such numbers exist.
Function Description

Complete the getTotalX function in the editor below. It should return the number of integers that are betwen the sets.

getTotalX has the following parameter(s):

int a[n]: an array of integers
int b[m]: an array of integers
Returns

int: the number of integers that are between the sets
Sample Input

2 3
2 4
16 32 96
Sample Output

3
Explanation

2 and 4 divide evenly into 4, 8, 12 and 16.
4, 8 and 16 divide evenly into 16, 32, 96.

4, 8 and 16 are the only three numbers for which each element of a is a factor and each is a factor of all elements of b.
*/

func getTotalX(a: [Int], b: [Int]) -> Int {
     guard a.min()! <= b.min()! else {return 0}
    var aa = [Int]()
    var s = 0
    for i in a.min()!...b.min()! {
       var k = 0
        for j in a {
            if i % j == 0 {
                k += 1
            }
        }
        if k == a.count {
            aa.append(i)
        }
    }
    
    for n in aa {
        var k = 0
        for m in b {
            if m % n == 0 {
                k += 1
            }
        }
        if k == b.count {
            s += 1
        }
    }
   return s
}
